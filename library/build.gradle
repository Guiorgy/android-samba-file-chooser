apply plugin: 'com.android.library'

def VERSION_NAME = project.VERSION_NAME
def VERSION_CODE = Integer.parseInt(project.VERSION_CODE)

def ANDROID_COMPILE_SDK_VERSION = Integer.parseInt(project.ANDROID_COMPILE_SDK_VERSION)
def ANDROID_TARGET_SDK_VERSION = Integer.parseInt(project.ANDROID_TARGET_SDK_VERSION)
def ANDROID_BUILD_TOOLS_VERSION = project.ANDROID_BUILD_TOOLS_VERSION
def ANDROID_MIN_SDK_VERSION = Integer.parseInt(project.ANDROID_MIN_SDK_VERSION)

def JAVA_COMPATIBILITY =  JavaVersion.valueOf(project.JAVA_COMPATIBILITY)

android {
    compileSdkVersion ANDROID_COMPILE_SDK_VERSION
    buildToolsVersion ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion ANDROID_MIN_SDK_VERSION
        targetSdkVersion ANDROID_TARGET_SDK_VERSION
        versionCode VERSION_CODE
        versionName VERSION_NAME
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
//        debug {
//            buildConfig "public final static boolean HAS_PROTOTYPE_FEATURE = true;"
//        }
//        release {
//            buildConfig "public final static boolean HAS_PROTOTYPE_FEATURE = false;"
//        }
    }
    compileOptions {
        sourceCompatibility JAVA_COMPATIBILITY
        targetCompatibility JAVA_COMPATIBILITY
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.1.0-beta01'
    implementation 'eu.agno3.jcifs:jcifs-ng:2.1.3'
    //implementation('org.slf4j:slf4j-api:1.7.26')
}

task createPom {
    //apply plugin: 'com.github.dcendents.android-maven'
    //apply from: 'https://raw.githubusercontent.com/sky-uk/gradle-maven-plugin/master/gradle-mavenizer.gradle'
    apply plugin: 'maven'
    description "Generates pom.xml"
    pom {
        project {
            groupId POM_GROUP_ID
            artifactId POM_ARTIFACT_ID
            version VERSION_NAME
            packaging 'aar'

            inceptionYear POM_INCEPTION_YEAR
            licenses {
                license {
                    name POM_LICENCE_NAME
                    url POM_LICENCE_URL
                    distribution POM_LICENCE_DIST
                }
            }
        }
    }.withXml {
        def dependenciesNode = asNode().appendNode('dependencies')
        configurations.implementation.allDependencies.each { dependency ->
            if (dependency.name != 'unspecified') {
                def dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', dependency.group)
                dependencyNode.appendNode('artifactId', dependency.name)
                dependencyNode.appendNode('version', dependency.version)
            }
        }
    }.writeTo("pom.xml")
    // based on https://gist.github.com/delor/f70560f14674b322dcd2
}

build.finalizedBy(createPom)
