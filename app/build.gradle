apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_COMPILE_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    signingConfigs {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        def ksPath = properties.getProperty('KS_PATH')
        def keystorePropertiesFile = ksPath == null ? rootProject.file("../keystore.properties") : new File(ksPath)
        if (!keystorePropertiesFile.exists())
            keystorePropertiesFile = rootProject.file("../keystore.properties")
        if (keystorePropertiesFile.exists()) {
            println "ksPath = ${ksPath}ï¼Œusing ${keystorePropertiesFile.absolutePath}"
            def keystoreProperties = new Properties()
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
            config {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        } else {
            println "no valid ksPath, ignore it."
        }
    }
    defaultConfig {
        applicationId "com.obsez.android.lib.filechooser.demo"
        minSdkVersion project.ANDROID_MIN_SDK_VERSION
        targetSdkVersion project.ANDROID_TARGET_SDK_VERSION
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
    }
    buildTypes {
        debug {
            minifyEnabled true
            shrinkResources false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        lintConfig rootProject.file('lint.xml')
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'  // Some libraries have issues with this.
        disable 'OldTargetApi'    // Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities'   // For testing purpose. This is safe to remove.
        checkReleaseBuilds false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':library')
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha05'
    implementation 'eu.agno3.jcifs:jcifs-ng:2.1.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha5'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'

    /** LeakCanary - https://github.com/square/leakcanary */
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3'
}
repositories {
    mavenCentral()
}
